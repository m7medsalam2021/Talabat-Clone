using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Talabat.Core.Models.Order_Aggregate
{
    public class Order : BaseEntity
    {
        public string BuyerEmail { get; set; } // Email of the user who placed the order

        public DateTimeOffset OrderDate { get; set; } = DateTimeOffset.Now; // Date and time when the order was placed OffSet--> [UTC]

        public OrderStatus Status { get; set; } = OrderStatus.Pending;

        public Address ShippingAddress { get; set; } // Data in Address will be mapped into order table as columns[With Owner]

        public DeliveryMethod DeliveryMethod { get; set; } // Navigational Property [ONE]
        //public int DeliveryMethodId { get; set; } // Foreign Key [ONE] // we don't need it because we have the navigational property

        public ICollection<OrderItem> Items { get; set; } = new HashSet<OrderItem>(); // Navigational Property [MANY]

        public decimal SubTotal { get; set; }

        //[NotMapped]
        //public decimal Total { get => SubTotal + DeliveryMethod.Cost; }
        public decimal GetTotal()
            => SubTotal + DeliveryMethod.Cost;


        // PaymentIntentId is used to track the payment status of the order. It is a unique identifier generated by the payment processor (e.g., Stripe) when a payment is initiated. This ID is used to manage and confirm the payment process, ensuring that the order is properly linked to its corresponding payment transaction. It helps in tracking the payment status and handling any related operations, such as refunds or disputes.
        public string PaymentIntentId { get; set; }


        // Empty Parameterless Ctor -->
        // Entity Framework needs it to create an instance of the class when mapping the data from the database to the object.
        public Order()
        {
            
        }

        // Ctor With Parameters -->
        // This constructor is used to create an instance of the Order class with specific values for each property.
        public Order(string buyerEmail, Address shippingAddress, DeliveryMethod deliveryMethod, ICollection<OrderItem> items, decimal subTotal, string paymentIntentId)
        {
            BuyerEmail = buyerEmail;
            ShippingAddress = shippingAddress;
            DeliveryMethod = deliveryMethod;
            Items = items;
            SubTotal = subTotal;
            PaymentIntentId = paymentIntentId;
        }

    }
}
